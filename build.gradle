plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.+'
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

version = "${project.minecraft_version}-${project.mod_version}"
group = maven_group
archivesBaseName = base_name

java.toolchain.getLanguageVersion().set(JavaLanguageVersion.of(8))


repositories {
    maven {
        name = 'CurseForge'
        url = uri('https://www.cursemaven.com')
        content {
            includeGroup 'curse.maven'
        }
    }
    flatDir {
        dirs 'build/libs'
    }
}

minecraft {
    mappings channel: 'stable', version: forge_mappings
    accessTransformer = file("src/main/resources/META-INF/${at_file}.cfg")
    runs {
        client {
            workingDirectory file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade
    shadow.extendsFrom shade
}

dependencies {
    minecraft("net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}")
    shade(fg.deobf("com.gildedgames.orbis:orbis-lib:${project.orbis_version}"))
}

sourceSets {
    test {
        java { srcDir "src/test/java" }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    setArchiveClassifier('universal')
    mergeServiceFiles()
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': minecraft_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    from sourceSets.main.output
    setArchiveClassifier('universal')
    manifest {
        attributes([
                'FMLAT': "${at_file}.cfg",
                'SignedFileName': jar.archiveFile
        ])
    }
}

tasks.register('signJar', Jar) {
    File secretsFile = Objects.nonNull(System.getenv("JARSIGN_SECRETS_FILE")) ?
            file(System.getenv("JARSIGN_SECRETS_FILE")) : null
    if(Objects.nonNull(secretsFile)) {
        Properties secrets = new Properties()
        secrets.load(secretsFile.newReader())
        keyStore = System.getenv("JARSIGN_KEYSTORE_FILE")
        alias = secrets.alias
        storePass = secrets.storePassword
        keyPass = secrets.keyPassword
    }
}

tasks.assemble.dependsOn('shadowJar')
tasks.build.dependsOn('signJar')
tasks.jar.finalizedBy('reobfJar')
tasks.shadowJar.dependsOn('reobfJar')
tasks.signJar.mustRunAfter('reobfShadowJar')